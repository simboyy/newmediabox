{"version":3,"sources":["config/express.js"],"names":["app","env","get","use","static","join","root","set","engine","require","renderFile","json","limit","urlencoded","extended","initialize","secret","secrets","session","saveUninitialized","resave","store","MongoStore","mongooseConnection","connection","db","process","SAUCE_USERNAME","csrf","angular","hsts","maxAge","includeSubDomains","preload","xssProtection","ignore"],"mappings":"AAAA;;;;AAIA;;;;;;kBAmBe,UAASA,GAAT,EAAc;AAC3B,MAAIC,MAAMD,IAAIE,GAAJ,CAAQ,KAAR,CAAV;;AAEA,MAAID,QAAQ,aAAR,IAAyBA,QAAQ,MAArC,EAA6C;AAC3CD,QAAIG,GAAJ,CAAQ,kBAAQC,MAAR,CAAe,eAAKC,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,MAAvB,CAAf,CAAR;AACD;;AAED,MAAIL,QAAQ,YAAZ,EAA0B;AACxBD,QAAIG,GAAJ,CAAQ,4BAAQ,eAAKE,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,QAAvB,EAAiC,aAAjC,CAAR,CAAR;AACD;;AAEDN,MAAIO,GAAJ,CAAQ,SAAR,EAAmB,eAAKF,IAAL,CAAU,sBAAOC,IAAjB,EAAuB,QAAvB,CAAnB;AACAN,MAAIG,GAAJ,CAAQ,kBAAQC,MAAR,CAAeJ,IAAIE,GAAJ,CAAQ,SAAR,CAAf,CAAR;AACAF,MAAIG,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEAH,MAAIO,GAAJ,CAAQ,OAAR,EAAiB,sBAAOD,IAAP,GAAc,eAA/B;AACAN,MAAIQ,MAAJ,CAAW,MAAX,EAAmBC,QAAQ,KAAR,EAAeC,UAAlC;AACAV,MAAIO,GAAJ,CAAQ,aAAR,EAAuB,MAAvB;AACAP,MAAIG,GAAJ,CAAQ,4BAAR;AACAH,MAAIG,GAAJ,CAAQ,qBAAWQ,IAAX,CAAgB,EAACC,OAAO,MAAR,EAAhB,CAAR;AACAZ,MAAIG,GAAJ,CAAQ,qBAAWU,UAAX,CAAsB,EAACD,OAAO,MAAR,EAAgBE,UAAU,IAA1B,EAAtB,CAAR;AACAd,MAAIG,GAAJ,CAAQ,qBAAWU,UAAX,CAAsB,EAAEC,UAAU,KAAZ,EAAtB,CAAR;AACAd,MAAIG,GAAJ,CAAQ,qBAAWQ,IAAX,EAAR;AACAX,MAAIG,GAAJ,CAAQ,+BAAR;AACAH,MAAIG,GAAJ,CAAQ,6BAAR;AACAH,MAAIG,GAAJ,CAAQ,mBAASY,UAAT,EAAR;;AAEA;AACA;AACA;AACAf,MAAIG,GAAJ,CAAQ,8BAAQ;AACda,YAAQ,sBAAOC,OAAP,CAAeC,OADT;AAEdC,uBAAmB,IAFL;AAGdC,YAAQ,KAHM;AAIdC,WAAO,IAAIC,UAAJ,CAAe;AACpBC,0BAAoB,mBAASC,UADT;AAEpBC,UAAI;AAFgB,KAAf;AAJO,GAAR,CAAR;;AAUA;;;;AAIA,MAAIxB,QAAQ,MAAR,IAAkB,CAACyB,QAAQzB,GAAR,CAAY0B,cAAnC,EAAmD;AACjD3B,QAAIG,GAAJ,CAAQ,qBAAM;AACZyB,YAAM;AACJC,iBAAS;AADL,OADM;AAIZ;AACAC,YAAM;AACJC,gBAAQ,QADJ,EACc;AAClBC,2BAAmB,IAFf;AAGJC,iBAAS;AAHL,OALM;AAUZC,qBAAe;AAVH,KAAN,CAAR;AAYD;;AAED,MAAI,kBAAkBjC,GAAtB,EAA2B;AACzBD,QAAIG,GAAJ,CAAQM,QAAQ,oBAAR,EAA8B;AACpC0B,cAAQ,CACN,cADM,EAEN,cAFM,EAEU,eAFV,EAE2B,eAF3B,EAE4C,eAF5C,EAE6D,gBAF7D,EAGN,eAHM,EAGW,eAHX,EAG4B,gBAH5B,EAG8C,eAH9C,EAG+D,eAH/D;AAD4B,KAA9B,CAAR;AAOD;;AAED,MAAI,kBAAkBlC,GAAlB,IAAyB,WAAWA,GAAxC,EAA6C;AAC3CD,QAAIG,GAAJ,CAAQ,6BAAR,EAD2C,CAClB;AAC1B;AACF,C;;AAzFD;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAImB,aAAa,qDAAjB","file":"express.js","sourcesContent":["/**\n * Express configuration\n */\n\n'use strict';\n\nimport express from 'express';\nimport favicon from 'serve-favicon';\nimport morgan from 'morgan';\nimport compression from 'compression';\nimport bodyParser from 'body-parser';\nimport methodOverride from 'method-override';\nimport cookieParser from 'cookie-parser';\nimport errorHandler from 'errorhandler';\nimport path from 'path';\nimport lusca from 'lusca';\nimport config from './environment';\nimport passport from 'passport';\nimport session from 'express-session';\nimport connectMongo from 'connect-mongo';\nimport mongoose from 'mongoose';\nvar MongoStore = connectMongo(session);\n\nexport default function(app) {\n  var env = app.get('env');\n\n  if (env === 'development' || env === 'test') {\n    app.use(express.static(path.join(config.root, '.tmp')));\n  }\n\n  if (env === 'production') {\n    app.use(favicon(path.join(config.root, 'client', 'favicon.ico')));\n  }\n\n  app.set('appPath', path.join(config.root, 'client'));\n  app.use(express.static(app.get('appPath')));\n  app.use(morgan('dev'));\n\n  app.set('views', config.root + '/server/views');\n  app.engine('html', require('ejs').renderFile);\n  app.set('view engine', 'html');\n  app.use(compression());\n  app.use(bodyParser.json({limit: '50mb'}));\n  app.use(bodyParser.urlencoded({limit: '50mb', extended: true}));\n  app.use(bodyParser.urlencoded({ extended: false }));\n  app.use(bodyParser.json());\n  app.use(methodOverride());\n  app.use(cookieParser());\n  app.use(passport.initialize());\n\n  // Persist sessions with MongoStore / sequelizeStore\n  // We need to enable sessions for passport-twitter because it's an\n  // oauth 1.0 strategy, and Lusca depends on sessions\n  app.use(session({\n    secret: config.secrets.session,\n    saveUninitialized: true,\n    resave: false,\n    store: new MongoStore({\n      mongooseConnection: mongoose.connection,\n      db: 'material-shop'\n    })\n  }));\n\n  /**\n   * Lusca - express server security\n   * https://github.com/krakenjs/lusca\n   */\n  if (env !== 'test' && !process.env.SAUCE_USERNAME) {\n    app.use(lusca({\n      csrf: {\n        angular: true\n      },\n      // xframe: 'SAMEORIGIN',\n      hsts: {\n        maxAge: 31536000, //1 year, in seconds\n        includeSubDomains: true,\n        preload: true\n      },\n      xssProtection: true\n    }));\n  }\n\n  if ('development' === env) {\n    app.use(require('connect-livereload')({\n      ignore: [\n        /^\\/api\\/(.*)/,\n        /\\.js(\\?.*)?$/, /\\.css(\\?.*)?$/, /\\.svg(\\?.*)?$/, /\\.ico(\\?.*)?$/, /\\.woff(\\?.*)?$/,\n        /\\.png(\\?.*)?$/, /\\.jpg(\\?.*)?$/, /\\.jpeg(\\?.*)?$/, /\\.gif(\\?.*)?$/, /\\.pdf(\\?.*)?$/\n      ]\n    }));\n  }\n\n  if ('development' === env || 'test' === env) {\n    app.use(errorHandler()); // Error handler - has to be last\n  }\n}\n"]}