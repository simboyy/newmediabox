{"version":3,"sources":["app.js"],"names":["Promise","require","connect","connection","on","err","console","error","process","exit","seedDB","app","server","createServer","socketio","serveClient","env","path","default","startServer","angularFullstack","listen","port","ip","log","get","exports","module"],"mappings":"AAAA;;;;AAIA;;;;;;AAEA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAFA,mBAASA,OAAT,GAAmBC,QAAQ,UAAR,CAAnB;;;AAIA;AACA,mBAASC,OAAT,CAAiB,uCAAjB;AACA,mBAASC,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,UAASC,GAAT,EAAc;AAC5CC,UAAQC,KAAR,CAAc,+BAA+BF,GAA7C;AACAG,UAAQC,IAAR,CAAa,CAAC,CAAd;AACD,CAHD;;AAKA;AACA,IAAI,sBAAOC,MAAX,EAAmB;AAAET,UAAQ,eAAR;AAA2B;;AAEhD;AACA,IAAIU,MAAM,wBAAV;AACA,IAAIC,SAAS,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;AACA,IAAIG,WAAWb,QAAQ,WAAR,EAAqBW,MAArB,EAA6B;AAC1CG,eAAa,sBAAOC,GAAP,KAAe,YADc;AAE1CC,QAAM;AAFoC,CAA7B,CAAf;AAIAhB,QAAQ,mBAAR,EAA6BiB,OAA7B,CAAqCJ,QAArC;AACAb,QAAQ,kBAAR,EAA4BiB,OAA5B,CAAoCP,GAApC;AACAV,QAAQ,UAAR,EAAoBiB,OAApB,CAA4BP,GAA5B;;AAEA;AACA,SAASQ,WAAT,GAAuB;AACrBR,MAAIS,gBAAJ,GAAuBR,OAAOS,MAAP,CAAc,sBAAOC,IAArB,EAA2B,sBAAOC,EAAlC,EAAsC,YAAW;AACtEjB,YAAQkB,GAAR,CAAY,4CAAZ,EAA0D,sBAAOF,IAAjE,EAAuEX,IAAIc,GAAJ,CAAQ,KAAR,CAAvE;AACD,GAFsB,CAAvB;AAGD;;AAED,4BAAaN,WAAb;;AAEA;AACAO,UAAUC,OAAOD,OAAP,GAAiBf,GAA3B","file":"app.js","sourcesContent":["/**\n * Main application file\n */\n\n'use strict';\n\nimport express from 'express';\nimport mongoose from 'mongoose';\nmongoose.Promise = require('bluebird');\nimport config from './config/environment';\nimport http from 'http';\n\n// Connect to MongoDB\nmongoose.connect('mongodb://127.0.0.1:27017/mediaboxzim');\nmongoose.connection.on('error', function(err) {\n  console.error('MongoDB connection error: ' + err);\n  process.exit(-1);\n});\n\n// Populate databases with sample data\nif (config.seedDB) { require('./config/seed'); }\n\n// Setup server\nvar app = express();\nvar server = http.createServer(app);\nvar socketio = require('socket.io')(server, {\n  serveClient: config.env !== 'production',\n  path: '/socket.io-client'\n});\nrequire('./config/socketio').default(socketio);\nrequire('./config/express').default(app);\nrequire('./routes').default(app);\n\n// Start server\nfunction startServer() {\n  app.angularFullstack = server.listen(config.port, config.ip, function() {\n    console.log('Express server listening on %d, in %s mode', config.port, app.get('env'));\n  });\n}\n\nsetImmediate(startServer);\n\n// Expose app\nexports = module.exports = app;\n"]}