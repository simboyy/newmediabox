{"version":3,"sources":["api/statistic/statistic.controller.js"],"names":["group","index","show","create","update","destroy","respondWithResult","res","statusCode","entity","status","json","saveUpdates","updates","updated","merge","save","then","removeEntity","remove","end","handleEntityNotFound","handleError","err","send","req","async","require","fe","find","distinct","statistic","f","each","k","callback","x","key","v","active","exec","push","catch","findById","params","id","body","_id"],"mappings":"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","file":"statistic.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/statistics              ->  index\n * POST    /api/statistics              ->  create\n * GET     /api/statistics/:id          ->  show\n * PUT     /api/statistics/:id          ->  update\n * DELETE  /api/statistics/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport statistic from './statistic.model';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function(entity) {\n    var updated = _.merge(entity, updates);\n    return updated.save()\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n\n// Get all statistics group\nexport function group(req, res) {\n  var async = require(\"async\");\n  var fe = [];\n  statistic.find().distinct('key',function(err,statistic){\n  var f = {};\n    async.each(statistic, function(k, callback){\n      var x = {};\n      x.key = k;\n      x.v = [];\n        statistic.find({key:k,active:true}).distinct('val').exec(function(err,v){\n          x.v = v;\n          fe.push(x);\n          callback();\n        });\n      },\n      // 3rd param is the function to call when everything's done\n      function(err){\n        if( err ) { return res.status(404).send('Not Found'); } else { return res.status(200).json(fe); }\n      }\n    );\n});\n};\n\n// Gets a list of statistics\nexport function index(req, res) {\n  return statistic.find().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single statistic from the DB\nexport function show(req, res) {\n  return statistic.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new statistic in the DB\nexport function create(req, res) {\n  return statistic.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Updates an existing statistic in the DB\nexport function update(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  return statistic.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(saveUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a statistic from the DB\nexport function destroy(req, res) {\n  return statistic.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"]}