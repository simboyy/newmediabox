{"version":3,"sources":["api/review/review.controller.js"],"names":["index","my","show","create","update","destroy","config","isJson","str","JSON","parse","e","respondWithResult","res","statusCode","entity","status","json","saveUpdates","updates","updated","merge","save","then","removeEntity","remove","end","handleEntityNotFound","handleError","err","send","req","q","email","user","role","find","exec","catch","pid","query","active","$or","findById","params","id","body","uid","reviewSettings","moderate","_id"],"mappings":"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","file":"review.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/reviews              ->  index\n * POST    /api/reviews              ->  create\n * GET     /api/reviews/:id          ->  show\n * PUT     /api/reviews/:id          ->  upsert\n * PATCH   /api/reviews/:id          ->  patch\n * DELETE  /api/reviews/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport Review from './review.model';\nimport * as config from '../../config/environment/shared'\n\nfunction isJson(str) {\n  try {\n      str = JSON.parse(str);\n  } catch (e) {\n      str = str;\n  }\n  return str\n}\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if(entity) {\n      return res.status(statusCode).json(entity);\n    }\n    return null;\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function(entity) {\n    var updated = _.merge(entity, updates);\n    return updated.save()\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if(entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if(!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n// Gets a list of Reviews\nexport function index(req, res) {\n  var q = {email:req.user.email}\n  if(req.user.role === 'admin') q = {} \n  return Review.find(q).exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a list of Reviews\nexport function my(req, res) {\n  var q = {pid: req.query.pid, active: true}\n  if(req.user) q = {$or:[q,{email:req.user.email, pid: req.query.pid}]}\n  return Review.find(q).exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single Review from the DB\nexport function show(req, res) {\n  return Review.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Review in the DB\nexport function create(req, res) {\n  req.body.uid = req.user.email; // id change on every login hence email is used\n  if(config.reviewSettings.moderate) // If the review required modetation (server/settings/environment/shared.js)\n    req.body.active = false; \n  return Review.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Updates an existing Brand in the DB\nexport function update(req, res) {\n  if(req.body._id) { delete req.body._id; }\n  req.body.uid = req.user.email; // id change on every login hence email is used\n\n  return Review.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(saveUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Review from the DB\nexport function destroy(req, res) {\n  return Review.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"]}