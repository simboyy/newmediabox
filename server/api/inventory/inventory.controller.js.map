{"version":3,"sources":["api/inventory/inventory.controller.js"],"names":["group","index","show","create","update","destroy","isJson","str","JSON","parse","e","respondWithResult","res","statusCode","entity","status","json","saveUpdates","updates","updated","merge","save","then","removeEntity","remove","end","handleEntityNotFound","handleError","err","send","req","async","require","fe","find","distinct","inventory","f","each","k","callback","x","key","v","active","exec","push","query","q","where","console","log","sort","skip","parseInt","limit","select","p","catch","findById","params","id","body","_id"],"mappings":"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","file":"inventory.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/inventory              ->  index\n * POST    /api/inventory              ->  create\n * GET     /api/inventory/:id          ->  show\n * PUT     /api/inventory/:id          ->  update\n * DELETE  /api/inventory/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport Inventory from './inventory.model';\n\nfunction isJson(str) {\n  try {\n      str = JSON.parse(str);\n  } catch (e) {\n      str = str;\n  }\n  return str\n}\n\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function(entity) {\n    var updated = _.merge(entity, updates);\n    return updated.save()\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n\n// Get all inventory group\nexport function group(req, res) {\n  var async = require(\"async\");\n  var fe = [];\n  Inventory.find().distinct('key',function(err,inventory){\n  var f = {};\n    async.each(inventory, function(k, callback){\n      var x = {};\n      x.key = k;\n      x.v = [];\n        Inventory.find({key:k,active:true}).distinct('val').exec(function(err,v){\n          x.v = v;\n          fe.push(x);\n          callback();\n        });\n      },\n      // 3rd param is the function to call when everything's done\n      function(err){\n        if( err ) { return res.status(404).send('Not Found'); } else { return res.status(200).json(fe); }\n      }\n    );\n});\n};\n\n// Gets a list of inventory\nexport function index(req, res) {\n\n   if(req.query){\n    \n    var q = isJson(req.query.where);\n    console.log(q);\n    var sort = isJson(req.query.sort);\n    req.query.skip = parseInt(req.query.skip);\n    req.query.limit = parseInt(req.query.limit);\n    var select = isJson(req.query.select);\n      \n        var p = [];\n        Inventory.find(q).limit(req.query.limit).skip(req.query.skip).sort(sort).select(select).exec(function (err, inventory) {\n          if(err) { return handleError(res, err); }\n          return res.status(200).json(inventory);\n      }); \n  }else{\n  return Inventory.find().exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n  }\n}\n\n// Gets a single Inventory from the DB\nexport function show(req, res) {\n  return Inventory.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Inventory in the DB\nexport function create(req, res) {\n  return Inventory.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Updates an existing Inventory in the DB\nexport function update(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  return Inventory.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(saveUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Inventory from the DB\nexport function destroy(req, res) {\n  return Inventory.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"]}