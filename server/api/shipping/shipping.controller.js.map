{"version":3,"sources":["api/shipping/shipping.controller.js"],"names":["best","index","show","create","update","destroy","respondWithResult","res","statusCode","entity","status","json","saveUpdates","updates","updated","merge","save","then","removeEntity","remove","end","handleEntityNotFound","handleError","err","send","isJson","str","JSON","parse","e","req","query","params","weight","cartValue","q","active","country","minPrice","minFreeShipping","free","find","data","length","each","s","freeShipping","charge","carrier","isNaN","maxWeight","minWeight","r","exec","catch","findById","id","body","_id"],"mappings":"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","file":"shipping.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/shippings              ->  index\n * POST    /api/shippings              ->  create\n * GET     /api/shippings/:id          ->  show\n * PUT     /api/shippings/:id          ->  update\n * DELETE  /api/shippings/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport Shipping from './shipping.model';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function(entity) {\n    var updated = _.merge(entity, updates);\n    return updated.save()\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\nfunction isJson(str) {\n  try {\n      str = JSON.parse(str);\n  } catch (e) {\n      str = str;\n  }\n  return str\n}\n// Get all features group\nexport function best(req, res) {\n  if(req.query){\n    var params = isJson(req.query);\n    var weight = params.weight;\n    var cartValue = params.cartValue;\n    var q = {}\n    q.active = true;\n    q.country = params.country\n    var minPrice = 1000000;\n    var minFreeShipping = 1000000;\n    var best = {};\n    var free = {};\n    Shipping.find(q, function (err, data) {\n      if(err) handleError(res, err)\n      if(data.length<=0) handleError(res, err)\n      _.each(data, function(s){\n          if(s.freeShipping <= cartValue){\n            minPrice = 0;\n            best = s;\n            best.charge = 0;\n            free.carrier = s.carrier\n            // return res.status(200).json([best]); // Converted to array as expected by the requester\n            return false;\n          }\n\n          if (isNaN(weight))\n            weight = 0\n\n          if(s.maxWeight > weight && s.minWeight <= weight){ // Wish to ship to the proposed address\n            if(s.charge < minPrice){  \n                minPrice = s.charge;\n                best = s;\n            }\n            if(s.freeShipping < minFreeShipping){\n              minFreeShipping = s.freeShipping\n              free = s;\n            }\n          }\n      })\n      var r = {best: best, free:free}\n      return res.status(200).json([r]); // Converted to array as expected by the requester\n    });\n  }\n}\n\n// Gets a list of Shippings\nexport function index(req, res) {\n  return Shipping.find(req.query).exec()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single Shipping from the DB\nexport function show(req, res) {\n  return Shipping.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Shipping in the DB\nexport function create(req, res) {\n  return Shipping.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Updates an existing Shipping in the DB\nexport function update(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  return Shipping.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(saveUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Shipping from the DB\nexport function destroy(req, res) {\n  return Shipping.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"]}