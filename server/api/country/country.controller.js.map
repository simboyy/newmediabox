{"version":3,"sources":["api/country/country.controller.js"],"names":["active","index","show","create","update","destroy","respondWithResult","res","statusCode","entity","status","json","saveUpdates","updates","updated","merge","save","then","removeEntity","remove","end","handleEntityNotFound","handleError","err","send","req","async","require","selectedCountry","find","distinct","exec","shipping","each","a","callback","name","countries","push","query","catch","findById","params","id","body","_id"],"mappings":"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","file":"country.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/countries              ->  index\n * POST    /api/countries              ->  create\n * GET     /api/countries/:id          ->  show\n * PUT     /api/countries/:id          ->  update\n * DELETE  /api/countries/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport Country from './country.model';\nimport Shipping from '../shipping/shipping.model';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function(entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function(entity) {\n    var updated = _.merge(entity, updates);\n    return updated.save()\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function(entity) {\n    if (entity) {\n      return entity.remove()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function(entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode) {\n  statusCode = statusCode || 500;\n  return function(err) {\n    res.status(statusCode).send(err);\n  };\n}\n\n\n// Get list of countries for which there is atleast 1 shipping\nexport function active(req, res) {\n  var async = require(\"async\");\n  // Async is required. Because without async it does not wait while accessed outside the scope. it simply returns null\n    var selectedCountry = [];\n  Shipping.find({active:true}).distinct('country').exec(function (err, shipping) {\n    if(err) { return handleError(res, err); }\n    async.each(shipping, function(a, callback){\n      Country.find({name:a}, function (err, countries) {\n        if(err) { return handleError(res, err); }\n        selectedCountry.push(countries[0]);\n        callback();\n      });\n    },\n    // 3rd param is the function to call when everything's done\n    function(err){\n      if( err ) { return res.status(404).send('Not Found'); } else { return res.status(200).json(selectedCountry); }\n    });\n  });\n}\n\n// Gets a list of Countrys\nexport function index(req, res) {\n  Country.find(req.query)\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single Country from the DB\nexport function show(req, res) {\n  return Country.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Creates a new Country in the DB\nexport function create(req, res) {\n  return Country.create(req.body)\n    .then(respondWithResult(res, 201))\n    .catch(handleError(res));\n}\n\n// Updates an existing Country in the DB\nexport function update(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  return Country.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(saveUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a Country from the DB\nexport function destroy(req, res) {\n  return Country.findById(req.params.id).exec()\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"]}